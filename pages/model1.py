# -*- coding: utf-8 -*-
"""Team Project - Prediction Example - BA870-AC820.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ipr04946UfsPOJaROpUxUt-1L6pF-jW

#Example Colab Notebook for Team Project
## This notebook trains a linear model to detect earnings manipulations.

### Import libraries and packages
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm

"""### Upload Parameters file
* CSV file estimated parameters for Various versions of "Jones Accruals Model"
* CSV File located in "Team Project" Folder on Blackboard
"""

data = pd.read_csv('Project.csv')

"""###Drop extraneous data variables"""

data = data.drop(['indfmt', 'consol', 'popsrc', 'datafmt', 'curcd', 'costat', 'datadate'], axis=1)

"""### Examine variables in dataframe"""

data.info()

"""###Print out header of dataframe
* Note that 'gvkey' is the Compustat company identifier that we will be using.
"""

data.head()

"""###Sort all variables in dataframe by *gvkey*, then *fyear*"""

data = data.sort_values(['gvkey', 'fyear'], ascending = [True, True])

"""###View dataframe"""

data

"""###Create lagged values (prior year) of variables
* Example: at(t-1) = lagged(at(t))
* Only calculate WITHIN same gvkey group
"""

data['at_lagged'] = data.groupby('gvkey')['at'].shift(1)
data['sale_lagged'] = data.groupby('gvkey')['sale'].shift(1)
data['rect_lagged'] = data.groupby('gvkey')['rect'].shift(1)

"""###Re-examine dataframe"""

data

"""###Drop rows with missing values of:
* lagged variables, or
* *ibc*, or
* *oancf*
"""

data = data.dropna()

data

df = data

import warnings
warnings.filterwarnings('ignore')

"""###Rename date column to "date" to match WRDS data "date" column for MSFT and XOM"""

data['acc_ta'] = (data['ibc']-data['oancf'])/data['at_lagged']
data['inv_ta'] = 1/data['at_lagged']
data['Dsale_ta'] = ((data['sale']-data['sale_lagged']) - (data['rect']-data['rect_lagged']))/data['at_lagged']
data['ppe_ta'] = data['ppegt']/data['at_lagged']
data['roa'] = data['ibc']/data['at_lagged']

data

df=data[['acc_ta','inv_ta','Dsale_ta','ppe_ta','roa']]
df

df.boxplot()

dstuff = {'acc_ta': [0,0], 'inv_ta': [0,0], 'Dsale_ta': [0,0], 'ppe_ta': [0,0], 'roa': [0,0]}
row_labels = ['lower', 'upper']

ddd = pd.DataFrame(dstuff, index=row_labels)
ddd

df_1=df.copy()

# Define percentile thresholds
lower_percentile = 0.01
upper_percentile = 0.99

# Columns to check for outliers
cols_to_check = ['acc_ta', 'inv_ta', 'Dsale_ta', 'ppe_ta', 'roa']

# Iterate through columns and remove outliers
for col in cols_to_check:
    # Calculate quantiles
    ddd.at['lower', col] = df_1[col].quantile(lower_percentile)
    ddd.at['upper', col] = df_1[col].quantile(upper_percentile)

# Iterate through columns and remove outliers
for col in cols_to_check:
    # Filter rows based on the bounds
    df_1 = df_1[(df_1[col] >= ddd.at['lower', col]) & (df_1[col] <= ddd.at['upper', col])]

# df now contains the DataFrame with outliers removed
df_1

df_1=df.copy()

# Define percentile thresholds
lower_percentile = 0.01
upper_percentile = 0.99

# Columns to check for outliers
cols_to_check = ['acc_ta', 'inv_ta', 'Dsale_ta', 'ppe_ta', 'roa']

# Iterate through columns and remove outliers
for col in cols_to_check:
    # Calculate quantiles
    lower_bound = df_1[col].quantile(lower_percentile)
    upper_bound = df_1[col].quantile(upper_percentile)

    # Filter rows based on the bounds
    df_1 = df_1[(df_1[col] >= lower_bound) & (df_1[col] <= upper_bound)]

# df now contains the DataFrame with outliers removed
df_1

plt.boxplot([df_1['acc_ta'],df_1['inv_ta'], df_1['Dsale_ta'],df_1['ppe_ta'],df_1['roa']])


plt.title('Deleted Outliers')
plt.show()

y_1=df_1['acc_ta']
X_1=df_1[['inv_ta','Dsale_ta','ppe_ta','roa']]

#OLS Regression
# Use statsmodels
X_1 = sm.add_constant(X_1) # adding a constant
model = sm.OLS(y_1, X_1).fit()

#Print out regression statistics
print(model.summary())

from scipy.stats.mstats import winsorize
df['acc_ta_w'] = winsorize(df['acc_ta'],(0.01,0.01))
df['inv_ta_w'] = winsorize(df['inv_ta'],(0.00,0.01))
df['Dsale_ta_w'] = winsorize(df['Dsale_ta'],(0.01,0.01))
df['ppe_ta_w'] = winsorize(df['ppe_ta'],(0.01,0.01))
df['roa_w'] = winsorize(df['roa'],(0.01,0.01))



plt.boxplot([df['acc_ta_w'],df['inv_ta_w'], df['Dsale_ta_w'],df['ppe_ta_w'],df['roa_w']])


plt.title('Winsorized values')
plt.show()

df.describe()

y=df['acc_ta_w']
X=df[['inv_ta_w','Dsale_ta_w','ppe_ta_w','roa_w']]

"""###Run OLS regression for full sample

*acc_ta* = **a0** + **a1**×*inv_ta* + **b1**×*Dsale_ta* + **b2**×*ppe_ta* + **b3**×*roa* + *e*
"""

#OLS Regression
# Use statsmodels
X = sm.add_constant(X) # adding a constant
model = sm.OLS(y, X).fit()

#Print out regression statistics
print(model.summary())